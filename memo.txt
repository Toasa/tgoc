This is rough memo for myself.

---------------------------------------------------------------
token.go
* identifiers
* keywords
* operators and punctuation
* literals
    - Integer literals
    - Floating-point literals
    - Imaginary literals
    - Rune literals
    - String literals


ast.go
* Expresison
    - Operator
* Statement
* Built-in function

---------------------------------------------------------------

for stmt
    - single cond
        * for A { B }
        .loop:
            COMPILE A
            pop rax
            cmp rax, 0        
            je .LXXXX
            COMPILE B
            jmp .loop
        .LXXXX:
        
    - clause
        * for A; B; C { D }
            COMPILE A
        .loop:
            COMPILE B
            pop rax
            cmp rax, 0
            je .LXXXX
            COMPILE D
            COMPILE C
            jmp .loop:
        .LXXXX:

    - range clause


---------------------------------------------------------------

WANT
EX. a := 10; a = 1 + 10; return a;
VarMap map[string]*ast.Ident
    a := 10;
    &SVDecl{Name: "a", Val: 10}

    AssignStmt
    a = 1 + 10;
    右辺をparse. 
        文字列"a"を取得
    左辺をparse. 
        expr := p.parseExpr()

    p.VarMap["a"] = &Ident{Name: "a", Val: expr}
    とすればよいはず

------------------------------------------------------

run "var abc int = 200; return abc" 200
がコンパイルできるようになりたい

------------------------------------------------------
var a int
var b *int
var c **int
a = 10
b = &a (= rbp - 8)
c = &b (= rbp - 16)
return **c

現状では、
**cのときに
**を読み飛ばし、genExpr(c)を行い、bのアドレス: rbp - 16がスタックトップに積まれ、
それをreturnを、逆参照し、returnしている。
mov rax [rbp - 16]
ただ、[rbp - 16]の値も単なるaアドレス(rbp - 8)が入っているので逆参照がうまく行っていない。

よって以下のような挙動にしたい。まず*cを求めると、
*(*c) => 
mov rax, [rbp - 16]
mov rax, [rax]
push rax